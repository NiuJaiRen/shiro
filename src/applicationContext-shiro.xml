<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-lazy-init="true">
	
	<description>Shiro 安全配置</description>  

	<!-- 自定义的 Realm 
		直接配置实现了realm接口的bean
		-->
	<bean id="realm" class="com.njy.shiro.realms.ShiroRealm">
		<!-- <property name="userService" ref="userService"></property> -->
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"></property>
				<property name="hashIterations" value="1024"></property>
			</bean>
		</property>
	</bean>
	
	<!-- 用户授权信息 Cache, 采用 EhCache -->
	<bean id="shiroEhCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"></property>
	</bean>

	<!-- 配置 SecurityManager -->
	<bean id="securityManager" 
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="realm"></property>
		<property name="cacheManager" ref="shiroEhCacheManager"></property>
	</bean>
	
	<!--4.  配置保证 Shiro 内部 Bean 声明周期都得到执行的 Lifecycle Bean 后置处理器
			可以自动的来调用配置在Spring IOC容器中的shiro bean的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor" 
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	
	<!--5. AOP 式方法级权限检查 -->
	<!-- 为了支持 Shiro 的注释, 按官方文档的要求 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true"></property>
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	
	<!--6. Shiro Filter 
		6.1 id必须和web.xml 配置文件中的 <filter> 一致
		-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/login.jsp"></property>
		<property name="successUrl" value="/list.jsp"></property>
		<property name="unauthorizedUrl" value="/unauthorized.jsp"/>
		
		<!-- 
			配置哪些页面需要受保护，以及访问这些页面需要的权限
			1). action 可以被匿名访问
			2). authc 必须认证（即登录）后才能访问的页面
			3). logout 登出
		 -->
		   
		 <property name="filterChainDefinitions">
			<value>
				/login.jsp = anon
				/shiro/login = anon
				/shiro/logout = logout
				
				/admin.jsp = authc,roles[admin]
				/user.jsp = authc,roles[user]<!-- 必须验证而且有权限 -->
				/list.jsp = user<!-- 只要是经过记住我登录的或验证的就可以访问 -->
				
				# everything else requires authentication:
               /** = authc 
		 
               <!--  /list.jsp = anon list顺序位置不同，效果不同，支持第一次识别-->
               
               
				<!-- /login.jsp = authc
				/logout = logout
				/static/** = anon
				
				/role/** = roles[role]
				/user/** = roles[user]
				/chance/** = roles[chance]
				/plan/** = roles[plan]
				/dict/** = roles[dict]
				/product/** = roles[product]
				/storage/** = roles[storage]
				/customer/** = roles[customer]
				/contact/** = roles[customer]
				
				/** = user -->
			</value>
		</property>
	</bean>

</beans>
