1.授权需要继承AuthorizingRealm，并实现doGetAuthorizationInfo 方法
2.AuthorizingRealm 继承自AuthenticatingRealm，但是没有实现doGetAuthorizationInfo方法，所以需要认证只要继承AuthorizingRealm就好，同时实现两个抽象方法。

1.为什么使用MD5加密
2.如何做到：
1）在doGetAuthenticationInfo方法返回值创建对象时候，创建new SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);构造器
2）使用ByteSource.Util.bytes();来计算盐值
3）盐值需要唯一，一般使用用户名
4）使用new SimpleAuthenticationInfo(principal, credentials, credentialsSalt, realmName);计算加密后的值

1.如何把一个字符串加密成md5
2.替换当前AuthenticatingRealm 的 CredentialsMatcher属性。直接使用 HashCredentialsMatcher 对象，并设置加密属性算法。

密码比对：
通过AuthenticatingRealm 的 CredentialsMatcher属性进行比对！

1.获取当前的subject,调用SecurityUtils.getSubject()
        Subject currentUser = SecurityUtils.getSubject();
        
2. 测试当前用户是否被认证即是否已经登录
		currentUser.isAuthenticated()
		
3.若没有被认证，则把用户名和密码封装为UsernamePasswordToken对象
            UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");
1).创建一个表单页页面
2)发请求提交到SpringMVC 的 Hendler
3)获取用户名和密码

4.执行登录，调用currentUser.login((AuthenticationToken);方法
UsernamePasswordToken token = new UsernamePasswordToken("lonestarr", "vespa");
UsernamePasswordToken是AuthenticationToken的一个实现类

5.自定义Realm 的方法，从数据库中获取对应的记录，返回给shiro。
1）.实现 Realm 接口
2）.继承getAuthenticationInfo(AuthenticationToken arg0) 方法

6.由shiro完成密码比对
